#! /usr/bin/python3
# -*- coding: utf8 -*-
# The web-socket client module for the middlebox.
#
__author__ = "Sugesh Chandran"
__copyright__ = "Copyright (C) The neoview team."
__license__ = "GNU Lesser General Public License"
__version__ = "1.0"

from websocket import create_connection
import uuid
import json
import ssl
from src.nv_logger import nv_logger
from src.settings import NV_MIDBOX_HTTP_WS_PORT

class ws_token():
    '''
    Security token used for communication between midbox and webserver.
    '''
    token_list = {}

    def __init__(self):
        self.token_list.clear()

    def add_token(self, value = None):
        token_id = str(uuid.uuid4())
        self.token_list[token_id] = None
        return token_id

    def del_token(self, token_id):
        '''
        delete the token having token_id
        '''
        if token_id in self.token_list:
            del self.token_list[token_id]

    def is_token_present(self, token_id):
        return token_id in self.token_list

class midbox_wsClient():
    '''
    Class to send websocket messages to the webserver. The middlebox uses
    this class to update webserver about the system changes
    '''
    ws_path = 'ws://localhost:' + str(NV_MIDBOX_HTTP_WS_PORT) +\
                '/HTTPUserwebsocket'
    def __init__(self):
        self.ws_key = ws_token()
        self.nv_log_handler = nv_logger(self.__class__.__name__).get_logger()
        self.ws_client = None

    def create_notify_json(self):
        '''
        Create the list of json file to notify webserver on a event of change in
        system.
        '''
        ws_json = []
        ws_data = {
                   "token" : self.ws_key.add_token()
                   }
        ws_json.append(ws_data)
        return json.dumps(ws_json)

    def send_notify(self):
        '''
        Function to send a notification to ws server on a data change.
        '''
        try:
            if not self.ws_client:
                # Local connection to same server, No need to verify SSL cert.
                self.ws_client = create_connection(self.ws_path, timeout=5,
                                            sslopt={"cert_reqs": ssl.CERT_NONE})
        except Exception as e:
            self.nv_log_handler.error("Failed to make ws connection.. %s", e)
            return

        ntfy_data = self.create_notify_json()
        try:
            self.ws_client.send(ntfy_data)
        except:
            self.nv_log_handler.error("Failed to send on ws connection")

    def validate_token(self, token_id):
        '''
        Validate the token is being generated by the ws client.
        '''
        return self.ws_key.is_token_present(token_id)

    def delete_token(self, token_id):
        '''
        Delete the token that has been generated by the client before.
        '''
        self.ws_key.del_token(token_id)

GBL_WSCLIENT = midbox_wsClient()
